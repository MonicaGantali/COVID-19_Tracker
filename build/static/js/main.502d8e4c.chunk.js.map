{"version":3,"sources":["InfoBox.js","LineGraph.js","Table.js","util.js","Map.js","App.js","serviceWorker.js","index.js"],"names":["InfoBox","title","cases","total","active","isRed","props","console","log","Card","onClick","className","CardContent","Typography","color","gutterBottom","options","legend","display","elements","point","radius","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","data","numeral","value","format","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","casesType","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","a","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","Table","countries","map","country","casesTypeColors","hex","rgb","half_op","multiplier","recovered","deaths","tests","sortData","sortedData","sort","b","prettyPrintStat","stat","Map","center","zoom","TileLayer","url","attribution","Circle","countryInfo","lat","long","fillColor","fillOpacity","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","App","setInputCountry","state","setInputState","county","setInputCounty","setCountryInfo","setStateInfo","setCountries","states","setStates","mapCountries","setMapCountries","setMapStates","tableData","setTableData","setCasesType","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","counties","setCounties","countiesInfo","setCountiesInfo","name","iso2","getCountriesData","getStatesData","getCountiesData","onCountryChange","e","countryCode","target","onStateChange","stateCode","countiesList","province","FormControl","Select","variant","onChange","MenuItem","selctedCounty","find","i","countystats","todayCases","stats","confirmed","todayRecovered","todayDeaths","onCountyChange","isBlue","testsPerOneMillion","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"6YA6BeA,MAzBf,YAAoE,IAAjDC,EAAgD,EAAhDA,MAAOC,EAAyC,EAAzCA,MAAOC,EAAkC,EAAlCA,MAAOC,EAA2B,EAA3BA,OAAQC,EAAmB,EAAnBA,MAAUC,EAAS,0DAEjE,OADAC,QAAQC,IAAIP,EAAOG,GAEjB,kBAACK,EAAA,EAAD,CACEC,QAASJ,EAAMI,QACfC,UAAS,kBAAaP,GAAU,oBAAvB,YACPC,GAAS,iBAGX,kBAACO,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,MAAM,gBAAgBC,cAAY,GAC3Cd,GAEH,wBAAIU,UAAS,0BAAqBN,GAAS,0BACxCH,GAGH,kBAACW,EAAA,EAAD,CAAYF,UAAU,iBAAiBG,MAAM,iBAC1CX,EADH,a,yBCjBFa,EAAU,CACdC,OAAQ,CACNC,SAAS,GAEXC,SAAU,CACRC,MAAO,CACLC,OAAQ,IAGZC,qBAAqB,EACrBC,SAAU,CACRC,KAAM,QACNC,WAAW,EACXC,UAAW,CACTC,MAAO,SAAUC,EAAaC,GAC5B,OAAOC,IAAQF,EAAYG,OAAOC,OAAO,WAI/CC,OAAQ,CACNC,MAAO,CACL,CACEC,KAAM,OACNC,KAAM,CACJJ,OAAQ,WACRK,cAAe,QAIrBC,MAAO,CACL,CACEC,UAAW,CACTrB,SAAS,GAEXsB,MAAO,CAELC,SAAU,SAAUV,EAAOW,EAAOC,GAChC,OAAOb,IAAQC,GAAOC,OAAO,YAQnCY,EAAiB,SAACf,EAAMgB,GAE5B,IACIC,EADAC,EAAY,GAEhB,IAAK,IAAIC,KAAQnB,EAAK3B,MAAO,CAC3B,GAAI4C,EAAe,CACjB,IAAIG,EAAe,CACjBC,EAAGF,EACHG,EAAGtB,EAAKgB,GAAWG,GAAQF,GAE7BC,EAAUK,KAAKH,GAEjBH,EAAgBjB,EAAKgB,GAAWG,GAElC,OAAOD,GA4CMM,MAzCf,YAAmC,IAAdR,EAAa,EAAbA,UAAa,EACRS,mBAAS,IADD,mBACzBzB,EADyB,KACnB0B,EADmB,KAqBhC,OAlBAC,qBAAU,YAEO,uCAAG,sBAAAC,EAAA,sEACVC,MAAM,8DACTC,MAAK,SAACC,GACL,OAAOA,EAASC,UAEjBF,MAAK,SAAC9B,GACL,IAAIkB,EAAYH,EAAef,EAAMgB,GACrCU,EAAQR,GACRxC,QAAQC,IAAIuC,MARA,2CAAH,qDAafe,KACC,CAACjB,IAGF,8BACO,OAAJhB,QAAI,IAAJA,OAAA,EAAAA,EAAMkC,QAAS,GACd,kBAAC,IAAD,CACElC,KAAM,CACJmC,SAAU,CACR,CACEC,gBAAiB,yBACjBC,YAAa,UACbrC,KAAMA,KAIZb,QAASA,M,OCjFJmD,MAff,YAA+B,IAAdC,EAAa,EAAbA,UACf,OACE,yBAAKzD,UAAU,SACZyD,EAAUC,KAAI,SAACC,GAAD,OACb,4BACE,4BAAKA,EAAQA,SACb,4BACE,gCAASxC,IAAQwC,EAAQpE,OAAO8B,OAAO,e,0BCP7CuC,EAAkB,CACtBrE,MAAO,CACLsE,IAAK,UACLC,IAAK,OACLC,QAAS,yBACTC,WAAY,KAEdC,UAAW,CACTJ,IAAK,UACLC,IAAK,oBACLC,QAAS,0BACTC,WAAY,MAEdE,OAAQ,CACNL,IAAK,UACLC,IAAK,mBACLC,QAAS,yBACTC,WAAY,KAEdG,MAAO,CACLN,IAAK,UACLC,IAAK,oBACLC,QAAS,yBACTC,WAAY,MAIHI,EAAW,SAAClD,GACvB,IAAImD,EAAU,YAAOnD,GAQrB,OAPAmD,EAAWC,MAAK,SAACxB,EAAGyB,GAClB,OAAIzB,EAAEvD,MAAQgF,EAAEhF,OACN,EAED,KAGJ8E,GAGIG,EAAkB,SAACC,GAAD,OAC7BA,EAAI,WAAOtD,IAAQsD,GAAMpD,OAAO,SAAY,M,yBCxB/BqD,MAff,YAAsD,IAAvCjB,EAAsC,EAAtCA,UAAWvB,EAA2B,EAA3BA,UAAWyC,EAAgB,EAAhBA,OAAQC,EAAQ,EAARA,KAC3C,OACE,yBAAK5E,UAAU,OACb,kBAAC,IAAD,CAAY2E,OAAQA,EAAQC,KAAMA,GAChC,kBAACC,EAAA,EAAD,CACEC,IAAI,qDACJC,YAAY,2EAHhB,YDsCuB,SAAC7D,GAAD,IAAOgB,EAAP,uDAAmB,QAAnB,OAC3BhB,EAAKwC,KAAI,SAACC,GAAD,OAEP,kBAACqB,EAAA,EAAD,CACEL,OAAQ,CAAChB,EAAQsB,YAAYC,IAAKvB,EAAQsB,YAAYE,MACtDhF,MAAOyD,EAAgB1B,GAAW2B,IAClCuB,UAAWxB,EAAgB1B,GAAW2B,IACtCwB,YAAa,GACb3E,OACkC,IAAhC4E,KAAKC,KAAK5B,EAAQzB,KAGpB,kBAACsD,EAAA,EAAD,KACE,yBAAKxF,UAAU,kBACb,yBACEA,UAAU,YACVyF,MAAO,CAAEC,gBAAgB,OAAD,OAAS/B,EAAQsB,YAAYU,KAA7B,QAE1B,yBAAK3F,UAAU,aAAa2D,EAAQA,SACpC,yBAAK3D,UAAU,kBAAf,UACUmB,IAAQwC,EAAQpE,OAAO8B,OAAO,QAExC,yBAAKrB,UAAU,kBAAf,cACcmB,IAAQwC,EAAQM,WAAW5C,OAAO,QAEhD,yBAAKrB,UAAU,eAAf,WACWmB,IAAQwC,EAAQO,QAAQ7C,OAAO,QAE1C,yBAAKrB,UAAU,cAAf,UACUmB,IAAQwC,EAAQQ,OAAO9C,OAAO,cC7DzCuE,CAAcnC,EAAWvB,MCwVnB2D,G,OA3RH,WAAO,IAAD,EACmBlD,mBAAS,aAD5B,mBACTgB,EADS,KACAmC,EADA,OAEenD,mBAAS,SAFxB,mBAEToD,EAFS,KAEFC,EAFE,OAIiBrD,mBAAS,UAJ1B,mBAITsD,EAJS,KAIDC,EAJC,OAKsBvD,mBAAS,IAL/B,mBAKTsC,EALS,KAKIkB,EALJ,OAMkBxD,mBAAS,IAN3B,mBAMEyD,GANF,aAOkBzD,mBAAS,IAP3B,mBAOTc,EAPS,KAOE4C,EAPF,OAQY1D,mBAAS,IARrB,mBAQT2D,EARS,KAQDC,EARC,OASwB5D,mBAAS,IATjC,mBAST6D,EATS,KASKC,EATL,OAUkB9D,mBAAS,IAV3B,mBAUE+D,GAVF,aAWkB/D,mBAAS,IAX3B,mBAWTgE,EAXS,KAWEC,GAXF,QAYkBjE,mBAAS,SAZ3B,qBAYTT,GAZS,MAYE2E,GAZF,SAakBlE,mBAAS,CAAEuC,IAAK,SAAU4B,KAAM,UAblD,qBAaTC,GAbS,MAaEC,GAbF,SAccrE,mBAAS,GAdvB,qBAcTsE,GAdS,MAcAC,GAdA,SAegBvE,mBAAS,IAfzB,qBAeTwE,GAfS,MAeCC,GAfD,SAgBwBzE,mBAAS,IAhBjC,qBAgBT0E,GAhBS,MAgBKC,GAhBL,SAiBiB3E,mBAAS,IAjB1B,qCAkBgBA,mBAAS,KAlBzB,iCAsBhBE,qBAAU,WACRE,MAAM,sCACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAAC9B,GACLiF,EAAejF,QAElB,IAEH2B,qBAAU,WACRE,MAAM,sCACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAAC9B,GACLkF,EAAalF,QAEhB,IAIH2B,qBAAU,YACc,uCAAG,sBAAAC,EAAA,sDACvBC,MAAM,4CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAAC9B,GACL,IAAMuC,EAAYvC,EAAKwC,KAAI,SAACC,GAAD,MAAc,CACvC4D,KAAM5D,EAAQA,QACdvC,MAAOuC,EAAQsB,YAAYuC,SAEzBnD,EAAaD,EAASlD,GAC1BmF,EAAa5C,GACbgD,EAAgBvF,GAChB0F,GAAavC,MAXM,2CAAH,qDAetBoD,KACC,IAEH5E,qBAAU,YACW,uCAAG,sBAAAC,EAAA,sDACpBC,MAAM,yCACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAAC9B,GACL,IAAMoF,EAASpF,EAAKwC,KAAI,SAACqC,GAAD,MAAY,CAClCwB,KAAMxB,EAAMA,MACb3E,MAAO2E,EAAMA,UAEV1B,EAAaD,EAASlD,GAC1BqF,EAAUD,GACVI,EAAaxF,GACb0F,GAAavC,MAXG,2CAAH,qDAenBqD,KACC,IAEH7E,qBAAU,YACe,uCAAG,sBAAAC,EAAA,sDACxBC,MAAM,mDACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAAC9B,GACLtB,QAAQC,IAAIqB,GACZoG,GAAgBpG,MALI,2CAAH,qDASvByG,KACC,IAEH/H,QAAQC,IAAIqC,IAEZ,IAAM0F,GAAe,uCAAG,WAAOC,GAAP,iBAAA/E,EAAA,6DAChBgF,EAAcD,EAAEE,OAAO3G,MACvB0D,EACY,cAAhBgD,EACI,qCADJ,mDAEgDA,GAL5B,SAMhB/E,MAAM+B,GACT9B,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAAC9B,GACL4E,EAAgBgC,GAChB3B,EAAejF,GAEb8F,GADgB,aAAfc,EACY,CAAC5G,EAAK+D,YAAYC,IAAKhE,EAAK+D,YAAYE,MAGxC,CAAE,UAAW,aAfV,2CAAH,sDAoCf6C,GAAa,uCAAG,WAAOH,EAAGR,GAAV,iBAAAvE,EAAA,6DACdmF,EAAYJ,EAAEE,OAAO3G,MACrB0D,EACU,UAAdmD,EACI,8CADJ,gDAE6CA,GAL3B,SAMdlF,MAAM+B,GACT9B,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAAC9B,GACL,IAAIgH,EAAa,GACnBb,EAAa3D,KAAI,SAACuC,GACfA,EAAOkC,WAAWF,GACvBC,EAAazF,KAAK,CACZ8E,KAAMtB,EAAOA,OACd7E,MAAO6E,EAAOA,SAEfmB,GAAYc,IAGZhC,EAAe,aAKfK,EAAUD,GACVN,EAAciC,GACd9B,EAAejF,GAChB8F,GAAa,CAAE,YAAc,aAC5BE,GAAW,MA5BK,2CAAH,wDAmCnB,OAEE,yBAAKlH,UAAU,OACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,eACb,gDACA,kBAACoI,EAAA,EAAD,CAAapI,UAAU,iBACrB,kBAACqI,EAAA,EAAD,CACEC,QAAQ,WACRlH,MAAOuC,EACP4E,SAAUX,IAEV,kBAACY,EAAA,EAAD,CAAUpH,MAAM,aAAhB,aACCqC,EAAUC,KAAI,SAACC,GAAD,OACb,kBAAC6E,EAAA,EAAD,CAAUpH,MAAOuC,EAAQvC,OAAQuC,EAAQ4D,WAMhC,OAAV5D,EAAkB,8BAAM,kBAACyE,EAAA,EAAD,CAAapI,UAAU,iBAC/C,kBAACqI,EAAA,EAAD,CACEC,QAAQ,WACRlH,MAAO2E,EACPwC,SAAU,SAACV,GAAD,OAAOG,GAAcH,EAAGR,MAElC,kBAACmB,EAAA,EAAD,CAAUpH,MAAM,SAAhB,SACCkF,EAAO5C,KAAI,SAACqC,GAAD,OACV,kBAACyC,EAAA,EAAD,CAAUpH,MAAO2E,EAAM3E,OAAQ2E,EAAMwB,YAIjC,KAGF,UAARxB,EAAkB,8BAAM,kBAACqC,EAAA,EAAD,CAAapI,UAAU,iBAC/C,kBAACqI,EAAA,EAAD,CACEC,QAAQ,WACRlH,MAAO6E,EACPsC,SAAU,SAACV,GAAD,OAzFA,SAACA,EAAGR,GAEzB,IAAMpB,EAAS4B,EAAEE,OAAO3G,MAClBqH,EAAgBpB,EAAaqB,MAAK,SAAAC,GAAC,OAAEA,EAAE1C,SAASA,KAClD2C,EAAa,GACjB1C,EAAeD,GAEhB2C,EAAYnG,KAAK,CAChBoG,WAAYJ,EAAcK,MAAMC,UAChCC,eAAgBP,EAAcK,MAAM7E,UACpCgF,YAAaR,EAAcK,MAAM5E,SAElCiC,EAAeyC,EAAY,IA6EEM,CAAerB,EAAGR,MAEnC,kBAACmB,EAAA,EAAD,CAAUpH,MAAM,UAAhB,UAEC+F,GAASzD,KAAI,SAACuC,GAAD,OACZ,kBAACuC,EAAA,EAAD,CAAUpH,MAAO6E,EAAO7E,OAAQ6E,EAAOsB,YAKxC,MAKR,yBAAKvH,UAAU,cACb,kBAAC,EAAD,CACED,QAAS,SAAC8H,GAAD,OAAOhB,GAAa,UAC7BvH,MAAM,oBACNI,OAAK,EACLD,OAAsB,UAAdyC,GACR3C,MAAOiF,EAAgBS,EAAY4D,YAEjCrJ,MAAO2B,IAAQ8D,EAAY1F,OAAO8B,OAAO,UAE7C,kBAAC,EAAD,CACEtB,QAAS,SAAC8H,GAAD,OAAOhB,GAAa,cAC7BvH,MAAM,YACNG,OAAsB,cAAdyC,GACR3C,MAAOiF,EAAgBS,EAAY+D,gBACnCxJ,MAAO2B,IAAQ8D,EAAYhB,WAAW5C,OAAO,UAE/C,kBAAC,EAAD,CACEtB,QAAS,SAAC8H,GAAD,OAAOhB,GAAa,WAC7BvH,MAAM,SACNI,OAAK,EACLD,OAAsB,WAAdyC,GACR3C,MAAOiF,EAAgBS,EAAYgE,aACnCzJ,MAAO2B,IAAQ8D,EAAYf,QAAQ7C,OAAO,UAE3C,kBAAC,EAAD,CACCtB,QAAS,SAAC8H,GAAD,OAAOhB,GAAa,WAC7BvH,MAAM,WACN6J,QAAM,EACN1J,OAAsB,WAAdyC,GACR3C,MAAOiF,EAAgBS,EAAYmE,oBACnC5J,MAAO2B,IAAQ8D,EAAYd,OAAO9C,OAAO,WAG7C,6BAGQ,kBAAC,EAAD,CACNoC,UAAW+C,EACXtE,UAAWA,GACXyC,OAAQoC,GACRnC,KAAMqC,OAUV,kBAACnH,EAAA,EAAD,CAAME,UAAU,cACd,kBAACC,EAAA,EAAD,KACE,yBAAKD,UAAU,oBACb,qDACA,kBAAC,EAAD,CAAOyD,UAAWkD,IAClB,6CAAmBzE,IACnB,kBAAC,EAAD,CAAWA,UAAWA,WClVdmH,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjH,MAAK,SAAAkH,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzK,QAAQyK,MAAMA,EAAMC,a","file":"static/js/main.502d8e4c.chunk.js","sourcesContent":["import React from \"react\";\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\nimport \"./InfoBox.css\";\n\nfunction InfoBox({ title, cases, total, active, isRed, ...props }) {\n  console.log(title, active);\n  return (\n    <Card\n      onClick={props.onClick}\n      className={`infoBox ${active && \"infoBox--selected\"} ${\n        isRed && \"infoBox--red\"\n      }`}\n    >\n      <CardContent>\n        <Typography color=\"textSecondary\" gutterBottom>\n          {title}\n        </Typography>\n        <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>\n          {cases}\n        </h2>\n\n        <Typography className=\"infoBox__total\" color=\"textSecondary\">\n          {total} Total\n        </Typography>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default InfoBox;\n","import React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport numeral from \"numeral\";\n\nconst options = {\n  legend: {\n    display: false,\n  },\n  elements: {\n    point: {\n      radius: 0,\n    },\n  },\n  maintainAspectRatio: false,\n  tooltips: {\n    mode: \"index\",\n    intersect: false,\n    callbacks: {\n      label: function (tooltipItem, data) {\n        return numeral(tooltipItem.value).format(\"+0,0\");\n      },\n    },\n  },\n  scales: {\n    xAxes: [\n      {\n        type: \"time\",\n        time: {\n          format: \"MM/DD/YY\",\n          tooltipFormat: \"ll\",\n        },\n      },\n    ],\n    yAxes: [\n      {\n        gridLines: {\n          display: false,\n        },\n        ticks: {\n          // Include a dollar sign in the ticks\n          callback: function (value, index, values) {\n            return numeral(value).format(\"0a\");\n          },\n        },\n      },\n    ],\n  },\n};\n\nconst buildChartData = (data, casesType) => {\n  debugger;\n  let chartData = [];\n  let lastDataPoint;\n  for (let date in data.cases) {\n    if (lastDataPoint) {\n      let newDataPoint = {\n        x: date,\n        y: data[casesType][date] - lastDataPoint,\n      };\n      chartData.push(newDataPoint);\n    }\n    lastDataPoint = data[casesType][date];\n  }\n  return chartData;\n};\n\nfunction LineGraph({ casesType }) {\n  const [data, setData] = useState({});\n\n  useEffect(() => {\n    debugger;\n    const fetchData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\n        .then((response) => {\n          return response.json();\n        })\n        .then((data) => {\n          let chartData = buildChartData(data, casesType);\n          setData(chartData);\n          console.log(chartData);\n          // buildChart(chartData);\n        });\n    };\n\n    fetchData();\n  }, [casesType]);\n\n  return (\n    <div>\n      {data?.length > 0 && (\n        <Line\n          data={{\n            datasets: [\n              {\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\n                borderColor: \"#CC1034\",\n                data: data,\n              },\n            ],\n          }}\n          options={options}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default LineGraph;\n","import React from \"react\";\nimport \"./Table.css\";\nimport numeral from \"numeral\";\n\nfunction Table({ countries }) {\n  return (\n    <div className=\"table\">\n      {countries.map((country) => (\n        <tr>\n          <td>{country.country}</td>\n          <td>\n            <strong>{numeral(country.cases).format(\"0,0\")}</strong>\n          </td>\n        </tr>\n      ))}\n    </div>\n  );\n}\n\nexport default Table;\n","import React from \"react\";\nimport numeral from \"numeral\";\nimport { Circle, Popup } from \"react-leaflet\";\n\nconst casesTypeColors = {\n  cases: {\n    hex: \"#CC1034\",\n    rgb: \"blue\",\n    half_op: \"rgba(204, 16, 52, 0.5)\",\n    multiplier: 800,\n  },\n  recovered: {\n    hex: \"#7dd71d\",\n    rgb: \"rgb(125, 215, 29)\",\n    half_op: \"rgba(125, 215, 29, 0.5)\",\n    multiplier: 1200,\n  },\n  deaths: {\n    hex: \"#fb4443\",\n    rgb: \"rgb(251, 68, 67)\",\n    half_op: \"rgba(251, 68, 67, 0.5)\",\n    multiplier: 2000,\n  },\n  tests: {\n    hex: \"#7dd71d\",\n    rgb: \"rgb(125, 215, 29)\",\n    half_op: \"rgba(251, 68, 67, 0.5)\",\n    multiplier: 2000,\n  },\n};\n\nexport const sortData = (data) => {\n  let sortedData = [...data];\n  sortedData.sort((a, b) => {\n    if (a.cases > b.cases) {\n      return -1;\n    } else {\n      return 1;\n    }\n  });\n  return sortedData;\n};\n\nexport const prettyPrintStat = (stat) =>\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\ndebugger;\nexport const showDataOnMap = (data, casesType = \"cases\") =>\n  data.map((country) => (\n    \n    <Circle\n      center={[country.countryInfo.lat, country.countryInfo.long]}\n      color={casesTypeColors[casesType].hex}\n      fillColor={casesTypeColors[casesType].hex}\n      fillOpacity={0.4}\n      radius={\n        Math.sqrt(country[casesType]) * 200\n      }\n    >\n      <Popup>\n        <div className=\"info-container\">\n          <div\n            className=\"info-flag\"\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\n          ></div>\n          <div className=\"info-name\">{country.country}</div>\n          <div className=\"info-confirmed\">\n            Cases: {numeral(country.cases).format(\"0,0\")}\n          </div>\n          <div className=\"info-recovered\">\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\n          </div>\n          <div className=\"info-deaths\">\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\n          </div>\n          <div className=\"info-tests\">\n            Tests: {numeral(country.tests).format(\"0,0\")}\n          </div>\n        </div>\n      </Popup>\n    </Circle>\n  ));\n","import React from \"react\";\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\nimport \"./Map.css\";\nimport { showDataOnMap } from \"./util\";\n\nfunction Map({ countries, casesType, center, zoom }) {\n  return (\n    <div className=\"map\">\n      <LeafletMap center={center} zoom={zoom}>\n        <TileLayer\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        />\n        debugger;\n        {showDataOnMap(countries, casesType)}\n      </LeafletMap>\n    </div>\n  );\n}\n\nexport default Map;\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport {\n  MenuItem,\n  FormControl,\n  Select,\n  Card,\n  CardContent,\n} from \"@material-ui/core\";\nimport InfoBox from \"./InfoBox\";\nimport LineGraph from \"./LineGraph\";\nimport Table from \"./Table\";\nimport { sortData, prettyPrintStat } from \"./util\";\nimport numeral from \"numeral\";\nimport Map from \"./Map\";\nimport \"leaflet/dist/leaflet.css\";\nconst statelatlong =[\n  {State: 'Colorado',\tLat: 39.5500507, Long:\t-105.7820674},\n  {State: 'Illinois',\tLat: 40.6331249, Long:\t-89.3985283},\n  {State: 'Montana',\tLat: 40.6331249, Long:\t-89.3985283},\n  {State: 'New Hampshire',\tLat: 40.6331249, Long:\t-89.3985283},\n  {State: 'New York',\tLat: 40.6331249, Long:\t-89.3985283},\n  {State: 'Arkansas',\tLat: 40.6331249, Long:\t-89.3985283},\n  {State: 'Kentucky',\tLat: 40.6331249, Long:\t-89.3985283},\n  {State: 'California',\tLat: 40.6331249, Long:\t-89.3985283},\n  {State: 'Maine',\tLat: 40.6331249, Long:\t-89.3985283},\n  {State: 'Oregon',\tLat: 40.6331249, Long:\t-89.3985283},\n  {State: 'Rhode Island',\tLat: 40.6331249, Long:\t-89.3985283},\n  {State: 'Virgin Islands',\tLat: 40.6331249, Long:\t-89.3985283},\n  {State: 'Minnesota',\tLat: 40.6331249, Long:\t-89.3985283},\n  {State: 'Vermont',\tLat: 40.6331249, Long:\t-89.3985283},\n  {State: 'West Virginia',\tLat: 40.6331249, Long:\t-89.3985283},\n  {State: 'Mississippi',\tLat: 40.6331249, Long:\t-89.3985283},\n  {State: 'Nebraska',\tLat: 40.6331249, Long:\t-89.3985283},\n  {State: 'Wisconsin',\tLat: 40.6331249, Long:\t-89.3985283},\n  {State: 'New Jersey',\tLat: 40.6331249, Long:\t-89.3985283},\n  {State: 'Wyoming',\tLat: 40.6331249, Long:\t-89.3985283},\n  {State: 'New Mexico',\tLat: 40.6331249, Long:\t-89.3985283},\n  {State: 'Guam',\tLat: 40.6331249, Long:\t-89.3985283},\n  {State: 'Alaska',\tLat: 40.6331249, Long:\t-89.3985283},\n  {State: 'Iowa',\tLat: 40.6331249, Long:\t-89.3985283},\n  {State: 'Kansas',\tLat: 40.6331249, Long:\t-89.3985283},\n  {State: 'Pennsylvania',\tLat: 40.6331249, Long:\t-89.3985283},\n  {State: 'South Dakota',\tLat: 40.6331249, Long:\t-89.3985283},\n  {State: 'Maryland',\tLat: 40.6331249, Long:\t-89.3985283},\n  {State: 'Tennessee',\tLat: 40.6331249, Long:\t-89.3985283},\n  {State: 'Washington',\tLat: 40.6331249, Long:\t-89.3985283},\n  {State: 'Northern Mariana Islands',\tLat: 40.6331249, Long:\t-89.3985283},\n  {State: 'Puerto Rico',\tLat: 40.6331249, Long:\t-89.3985283},\n  {State: 'Missouri',\tLat: 40.6331249, Long:\t-89.3985283},\n  {State: 'Connecticut',\tLat: 40.6331249, Long:\t-89.3985283},\n  {State: 'Nevada',\tLat: 40.6331249, Long:\t-89.3985283},\n  {State: 'Indiana',\tLat: 40.6331249, Long:\t-89.3985283},\n  {State: 'Oklahoma',\tLat: 40.6331249, Long:\t-89.3985283},\n  {State: 'Massachusetts',\tLat: 40.6331249, Long:\t-89.3985283},\n  {State: 'North Carolina',\tLat: 40.6331249, Long:\t-89.3985283},\n  {State: 'Delaware',\tLat: 40.6331249, Long:\t-89.3985283},\n  {State: 'District of Columbia',\tLat: 40.6331249, Long:\t-89.3985283},\n  {State: 'North Dakota',\tLat: 40.6331249, Long:\t-89.3985283},\n  {State: 'Ohio',\tLat: 40.6331249, Long:\t-89.3985283},\n  {State: 'Alabama',\tLat: 40.6331249, Long:\t-89.3985283},\n  {State: 'Arizona',\tLat: 40.6331249, Long:\t-89.3985283},\n  {State: 'Idaho',\tLat: 40.6331249, Long:\t-89.3985283},\n  {State: 'Louisiana',\tLat: 40.6331249, Long:\t-89.3985283},\n  {State: 'Michigan',\tLat: 40.6331249, Long:\t-89.3985283},\n  {State: 'Texas',\tLat: 40.6331249, Long:\t-89.3985283},\n  {State: 'Virginia',\tLat: 40.6331249, Long:\t-89.3985283},\n  {State: 'Florida',\tLat: 40.6331249, Long:\t-89.3985283},\n  {State: 'Georgia',\tLat: 40.6331249, Long:\t-89.3985283},\n  {State: 'Hawaii',\tLat: 40.6331249, Long:\t-89.3985283},\n  {State: 'South Carolina',\tLat: 40.6331249, Long:\t-89.3985283},\n  {State: 'Utah',\tLat: 40.6331249, Long:\t-89.3985283}\n\n\n];\nconst App = () => {\n  const [country, setInputCountry] = useState(\"worldwide\");\n  const [state, setInputState] = useState(\"state\");\n //const [latlng, setStateLatlng] = useState(\"latlng\")\n  const [county, setInputCounty] = useState(\"county\")\n  const [countryInfo, setCountryInfo] = useState({});\n  const [stateInfo, setStateInfo] = useState({});\n  const [countries, setCountries] = useState([]);\n  const [states, setStates] = useState([]);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [mapStates, setMapStates] = useState([]);\n  const [tableData, setTableData] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\n  const [mapZoom, setMapZoom] = useState(3);\n  const [counties, setCounties] = useState([]);\n  const [countiesInfo, setCountiesInfo] = useState([]);\n  const [latlng, setStateLatlng] = useState([]);\n  const[casesdata,setcasesdata] = useState([]);\n  \n \n  \n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then((response) => response.json())\n      .then((data) => {\n        setCountryInfo(data);\n      });\n  }, []);\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then((response) => response.json())\n      .then((data) => {\n        setStateInfo(data);\n      });\n  }, []);\n\n  \n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) => ({\n            name: country.country,\n            value: country.countryInfo.iso2,\n          }));\n          let sortedData = sortData(data);\n          setCountries(countries);\n          setMapCountries(data);\n          setTableData(sortedData);\n        });\n    };\n\n    getCountriesData();\n  }, []);\n\n  useEffect(() => {\n    const getStatesData = async () => {\n      fetch(\"https://disease.sh/v3/covid-19/states\")\n        .then((response) => response.json())\n        .then((data) => {\n          const states = data.map((state) => ({\n            name: state.state,\n           value: state.state,\n          }));\n          let sortedData = sortData(data);\n          setStates(states);\n          setMapStates(data);\n          setTableData(sortedData);\n        });\n    };\n\n    getStatesData();\n  }, []);\n\n  useEffect(() => {\n      const getCountiesData = async () => {\n      fetch(\"https://disease.sh/v3/covid-19/jhucsse/counties\")\n        .then((response) => response.json())\n        .then((data) => {  \n          console.log(data);\n          setCountiesInfo(data);\n        });\n    };\n\n    getCountiesData();\n  }, []);\n\n  console.log(casesType);\n\n  const onCountryChange = async (e) => {\n    const countryCode = e.target.value;\n    const url =\n      countryCode === \"worldwide\"\n        ? \"https://disease.sh/v3/covid-19/all\"\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n    await fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        setInputCountry(countryCode);\n        setCountryInfo(data);\n        if(countryCode != \"worldwide\"){\n          setMapCenter([data.countryInfo.lat, data.countryInfo.long]);   \n        }\n      else{\n          setMapCenter([ 34.80746, -40.4796]);\n      }\n        \n      });\n  };\n\n  const onCountyChange = (e, countiesInfo) =>{\n    \n    const county = e.target.value;\n    const selctedCounty = countiesInfo.find(i=>i.county===county);\n    let countystats =[];\n    setInputCounty(county);\n  \n   countystats.push({\n    todayCases: selctedCounty.stats.confirmed,\n    todayRecovered: selctedCounty.stats.recovered,\n    todayDeaths: selctedCounty.stats.deaths\n   })\n   setCountryInfo(countystats[0]);\n  }\n\n  const onStateChange = async (e, countiesInfo) => {\n    const stateCode = e.target.value;\n    const url =\n      stateCode === \"state\"\n        ? \"https://disease.sh/v3/covid-19/countries/US\"\n        : `https://disease.sh/v3/covid-19/states/${stateCode}`;\n    await fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        let countiesList=[];\n      countiesInfo.map((county) => {\n      if(county.province===stateCode){\n    countiesList.push({\n          name: county.county,\n         value: county.county        \n        })\n        setCounties(countiesList)\n      }\n      else{\n        setInputCounty(\"county\");\n\n      }\n      });\n       \n        setStates(states);\n        setInputState(stateCode);\n        setCountryInfo(data);\n       setMapCenter([ 39.5500507, \t-89.3985283]);\n        setMapZoom(5);\n       // this.setState({value: event.target.value});\n      });\n  };\n\n  \n\n  return (\n    \n    <div className=\"app\">\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          <h1>COVID-19 Tracker</h1>\n          <FormControl className=\"app__dropdown\">\n            <Select\n              variant=\"outlined\"\n              value={country}\n              onChange={onCountryChange}\n            >\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              {countries.map((country) => (\n                <MenuItem value={country.value}>{country.name}</MenuItem>\n              ))}\n            </Select>\n          </FormControl>    \n               \n             {\n               country==='US' ? (<span><FormControl className=\"app__dropdown\">\n               <Select\n                 variant=\"outlined\"\n                 value={state}\n                 onChange={(e) => onStateChange(e, countiesInfo)}\n               >\n                 <MenuItem value=\"state\">State</MenuItem>\n                 {states.map((state) => (\n                   <MenuItem value={state.value}>{state.name}</MenuItem>\n                 ))}\n               </Select>\n             </FormControl>\n             </span>):(null)\n             }\n             {\n             state!=='state' ?(<span><FormControl className=\"app__dropdown\">\n             <Select\n               variant=\"outlined\"\n               value={county}\n               onChange={(e) => onCountyChange(e, countiesInfo)}\n             >\n               <MenuItem value=\"county\">County</MenuItem>\n               \n               {counties.map((county) => (\n                 <MenuItem value={county.value}>{county.name}</MenuItem>\n               ))}\n             </Select>\n           </FormControl>\n           </span>\n             ):(null)\n             \n             }\n         \n        </div>\n        <div className=\"app__stats\">\n          <InfoBox\n            onClick={(e) => setCasesType(\"cases\")}\n            title=\"Coronavirus Cases\"\n            isRed\n            active={casesType === \"cases\"}\n            cases={prettyPrintStat(countryInfo.todayCases)}\n           \n              total={numeral(countryInfo.cases).format(\"0.0a\")}\n          />\n          <InfoBox\n            onClick={(e) => setCasesType(\"recovered\")}\n            title=\"Recovered\"\n            active={casesType === \"recovered\"}\n            cases={prettyPrintStat(countryInfo.todayRecovered)}\n            total={numeral(countryInfo.recovered).format(\"0.0a\")}\n          />\n          <InfoBox\n            onClick={(e) => setCasesType(\"deaths\")}\n            title=\"Deaths\"\n            isRed\n            active={casesType === \"deaths\"}\n            cases={prettyPrintStat(countryInfo.todayDeaths)}\n            total={numeral(countryInfo.deaths).format(\"0.0a\")}\n          />\n           <InfoBox\n            onClick={(e) => setCasesType(\"deaths\")}\n            title=\"TestRate\"\n            isBlue\n            active={casesType === \"deaths\"}\n            cases={prettyPrintStat(countryInfo.testsPerOneMillion)}\n            total={numeral(countryInfo.tests).format(\"0.0a\")}\n          />\n        </div>\n        <div>\n        {\n               state ==='state' ? (\n                <Map\n          countries={mapCountries}\n          casesType={casesType}\n          center={mapCenter}\n          zoom={mapZoom}\n        />):( <Map\n          countries={mapCountries}\n          casesType={casesType}\n          center={mapCenter}\n          zoom={mapZoom}\n        />)\n        }\n        </div>\n      </div>\n      <Card className=\"app__right\">\n        <CardContent>\n          <div className=\"app__information\">\n            <h3>Live Cases by Country</h3>\n            <Table countries={tableData} />\n            <h3>Worldwide new {casesType}</h3>\n            <LineGraph casesType={casesType} />\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}